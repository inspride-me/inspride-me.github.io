{"version":3,"sources":["../../src/commands/export.js"],"names":["originalConfig","config","staging","debug","isBuild","process","env","NODE_ENV","REACT_STATIC_ENV","BABEL_ENV","REACT_STATIC_STAGING","REACT_STATIC_DEBUG","fs","readJson","paths","TEMP","bundledEnv","Object","keys","forEach","key","opts","dev","routes","console","log","clientStats","Error","PrettyError","require","render","exit","onBuild"],"mappings":"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","sourcesContent":["import fs from 'fs-extra'\n//\nimport { exportRoutes, buildXML, prepareRoutes, getConfig } from '../static'\n\nexport default async ({\n  config: originalConfig,\n  staging,\n  debug,\n  isBuild,\n} = {}) => {\n  // ensure ENV variables are set\n  if (typeof process.env.NODE_ENV === 'undefined' && !debug) {\n    process.env.NODE_ENV = 'production'\n  }\n\n  process.env.REACT_STATIC_ENV = 'production'\n  process.env.BABEL_ENV = 'production'\n\n  if (staging) {\n    process.env.REACT_STATIC_STAGING = 'true'\n  }\n\n  if (debug) {\n    process.env.REACT_STATIC_DEBUG = 'true'\n  }\n\n  let config\n\n  // Allow config location to be overriden\n  if (!isBuild) {\n    config = await getConfig(originalConfig)\n    config.originalConfig = originalConfig\n    // Restore the process environment variables that were present during the build\n    const bundledEnv = await fs.readJson(\n      `${config.paths.TEMP}/bundle-environment.json`\n    )\n    Object.keys(bundledEnv).forEach(key => {\n      if (typeof process.env[key] === 'undefined') {\n        process.env[key] = bundledEnv[key]\n      }\n    })\n    config = await prepareRoutes({ config, opts: { dev: false } })\n  } else {\n    config = originalConfig\n  }\n\n  if (!config.routes) {\n    await prepareRoutes(config, { dev: false })\n  }\n\n  if (debug) {\n    console.log('DEBUG - Resolved static.config.js:')\n    console.log(config)\n  }\n\n  const clientStats = await fs.readJson(\n    `${config.paths.TEMP}/client-stats.json`\n  )\n\n  if (!clientStats) {\n    throw new Error('No Client Stats Found')\n  }\n\n  try {\n    await exportRoutes({\n      config,\n      clientStats,\n    })\n  } catch (e) {\n    const PrettyError = require('pretty-error')\n    console.log(new PrettyError().render(e))\n    process.exit(1)\n  }\n\n  await buildXML({ config })\n\n  if (config.onBuild) {\n    await config.onBuild({ config })\n  }\n}\n"],"file":"export.js"}