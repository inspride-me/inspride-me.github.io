{"version":3,"sources":["../../src/static/generateBrowserPlugins.js"],"names":["config","paths","imports","recurse","plugins","map","plugin","browserResolver","impIndex","indexOf","push","length","JSON","stringify","join","pluginsText","importsText","imp","index","file","targetPath","path","DIST","fs","remove","outputFile"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;4BAEe;AAAA;AAAA;AAAA;AAAA;AAAA;AAASA,YAAAA,MAAT,QAASA,MAAT;AACLC,YAAAA,KADK,GACKD,MADL,CACLC,KADK,EAGb;;AACMC,YAAAA,OAJO,GAIG,EAJH;;AAMPC,YAAAA,OANO,GAMG,SAAVA,OAAU,CAAAC,OAAO;AAAA,qBACrB;AADqB,2BAEjBA,OAAO,CACRC,GADC,CACG,UAAAC,MAAM,EAAI;AAAA,sBACLC,eADK,GACeD,MADf,CACLC,eADK,EAGb;;AACA,sBAAIC,QAAQ,GAAGD,eAAe,GAAGL,OAAO,CAACO,OAAR,CAAgBF,eAAhB,CAAH,GAAsC,CAAC,CAArE;;AACA,sBAAIC,QAAQ,KAAK,CAAC,CAAd,IAAmBD,eAAvB,EAAwC;AACtCL,oBAAAA,OAAO,CAACQ,IAAR,CAAa,oBAAMH,eAAN,CAAb;AACAC,oBAAAA,QAAQ,GAAGN,OAAO,CAACS,MAAR,GAAiB,CAA5B;AACD,mBARY,CAUb;;;AACA,8DACWC,IAAI,CAACC,SAAL,CAAeP,MAAf,CADX,wDAIOH,OAAO,CAACG,MAAM,CAACF,OAAP,IAAkB,EAAnB,CAJd,2BAKKG,eAAe,gBAASC,QAAT,6BALpB;AAQD,iBApBC,EAqBDM,IArBC,CAqBI,KArBJ,CAFiB;AAAA;AAAA,aANV,EA+Bb;;;AACMC,YAAAA,WAhCO,GAgCOZ,OAAO,CAACH,MAAM,CAACI,OAAP,IAAkB,EAAnB,CAhCd,EAkCb;;AACMY,YAAAA,WAnCO,GAmCOd,OAAO,CACxBG,GADiB,CACb,UAACY,GAAD,EAAMC,KAAN;AAAA,yCAA6BA,KAA7B,oBAA4CD,GAA5C;AAAA,aADa,EAEjBH,IAFiB,CAEZ,IAFY,CAnCP,EAuCb;;AACMK,YAAAA,IAxCO,yBAyCbH,WAzCa,6CA4CGD,WA5CH;AAiDPK,YAAAA,UAjDO,GAiDMC,cAAKP,IAAL,CAAUb,KAAK,CAACqB,IAAhB,EAAsB,iCAAtB,CAjDN;AAAA;AAAA,mBAkDPC,iBAAGC,MAAH,CAAUJ,UAAV,CAlDO;;AAAA;AAAA;AAAA,mBAmDPG,iBAAGE,UAAH,CAAcL,UAAd,EAA0BD,IAA1B,CAnDO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import path from 'path'\nimport slash from 'slash'\nimport fs from 'fs-extra'\n\nexport default async ({ config }) => {\n  const { paths } = config\n\n  // A deduped list of imports\n  const imports = []\n\n  const recurse = plugins =>\n    // Return an array of plugins\n    `[${plugins\n      .map(plugin => {\n        const { browserResolver } = plugin\n\n        // Add the plugin to the list of imports\n        let impIndex = browserResolver ? imports.indexOf(browserResolver) : -1\n        if (impIndex === -1 && browserResolver) {\n          imports.push(slash(browserResolver))\n          impIndex = imports.length - 1\n        }\n\n        // IIF to return the final plugin\n        return `(() => {\n  const plugin = ${JSON.stringify(plugin)}\n  return {\n    ...plugin,\n    plugins: ${recurse(plugin.plugins || [])},\n    hooks: ${browserResolver ? `imp${impIndex}(plugins.options)` : `{}`}\n  }\n})()`\n      })\n      .join(',\\n')}]`\n\n  // Create the pluginsText\n  const pluginsText = recurse(config.plugins || [])\n\n  // Create the importsText\n  const importsText = imports\n    .map((imp, index) => `import imp${index} from '${imp}'`)\n    .join('\\n')\n\n  // Create the file text\n  const file = `// Imports\n${importsText}\n\n// Plugins\nconst plugins = ${pluginsText}\n\n// Export em!\nexport default plugins`\n\n  const targetPath = path.join(paths.DIST, 'react-static-browser-plugins.js')\n  await fs.remove(targetPath)\n  await fs.outputFile(targetPath, file)\n}\n"],"file":"generateBrowserPlugins.js"}