"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _path = _interopRequireDefault(require("path"));

var _slash = _interopRequireDefault(require("slash"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(function () {
  var enterModule = require('react-hot-loader').enterModule;

  enterModule && enterModule(module);
})();

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(_ref) {
    var config, paths, imports, recurse, pluginsText, importsText, file, targetPath;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            config = _ref.config;
            paths = config.paths; // A deduped list of imports

            imports = [];

            recurse = function recurse(plugins) {
              return (// Return an array of plugins
                "[".concat(plugins.map(function (plugin) {
                  var browserResolver = plugin.browserResolver; // Add the plugin to the list of imports

                  var impIndex = browserResolver ? imports.indexOf(browserResolver) : -1;

                  if (impIndex === -1 && browserResolver) {
                    imports.push((0, _slash.default)(browserResolver));
                    impIndex = imports.length - 1;
                  } // IIF to return the final plugin


                  return "(() => {\n  const plugin = ".concat(JSON.stringify(plugin), "\n  return {\n    ...plugin,\n    plugins: ").concat(recurse(plugin.plugins || []), ",\n    hooks: ").concat(browserResolver ? "imp".concat(impIndex, "(plugins.options)") : "{}", "\n  }\n})()");
                }).join(',\n'), "]")
              );
            }; // Create the pluginsText


            pluginsText = recurse(config.plugins || []); // Create the importsText

            importsText = imports.map(function (imp, index) {
              return "import imp".concat(index, " from '").concat(imp, "'");
            }).join('\n'); // Create the file text

            file = "// Imports\n".concat(importsText, "\n\n// Plugins\nconst plugins = ").concat(pluginsText, "\n\n// Export em!\nexport default plugins");
            targetPath = _path.default.join(paths.DIST, 'react-static-browser-plugins.js');
            _context.next = 10;
            return _fsExtra.default.remove(targetPath);

          case 10:
            _context.next = 12;
            return _fsExtra.default.outputFile(targetPath, file);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function _default(_x) {
    return _ref2.apply(this, arguments);
  };
}();

var _default2 = _default;
exports.default = _default2;
;

(function () {
  var reactHotLoader = require('react-hot-loader').default;

  var leaveModule = require('react-hot-loader').leaveModule;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(_default, "default", "/Users/tannerlinsley/GitHub/react-static/packages/react-static/src/static/generateBrowserPlugins.js");
  leaveModule(module);
})();

;
//# sourceMappingURL=generateBrowserPlugins.js.map